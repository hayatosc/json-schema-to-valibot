name: JSON Schema Test Suite

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  test-suite:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10.12.1
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Run type checking
      run: pnpm typecheck
    
    - name: Run linting
      run: pnpm lint
    
    - name: Run unit tests
      run: pnpm test
    
    - name: Run JSON Schema Test Suite
      id: test-suite
      run: |
        echo "Running JSON Schema Test Suite..."
        pnpm test:suite > test-suite-output.txt 2>&1
        cat test-suite-output.txt
        
        # Extract stats from structured CI output
        TOTAL_TESTS=$(grep "TOTAL_TESTS=" test-suite-output.txt | cut -d'=' -f2)
        PASSED_TESTS=$(grep "PASSED_TESTS=" test-suite-output.txt | cut -d'=' -f2)
        FAILED_TESTS=$(grep "FAILED_TESTS=" test-suite-output.txt | cut -d'=' -f2)
        ERROR_TESTS=$(grep "ERROR_TESTS=" test-suite-output.txt | cut -d'=' -f2)
        PASS_RATE=$(grep "PASS_RATE=" test-suite-output.txt | cut -d'=' -f2)
        
        echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
        echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
        echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
        echo "error_tests=$ERROR_TESTS" >> $GITHUB_OUTPUT
        echo "pass_rate=${PASS_RATE}%" >> $GITHUB_OUTPUT
        
        # Set exit code based on whether we have test results
        if [ -z "$TOTAL_TESTS" ] || [ "$TOTAL_TESTS" = "0" ]; then
          echo "❌ No test results found"
          exit 1
        fi
      continue-on-error: true
    
    - name: Upload test suite output
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-suite-results
        path: test-suite-output.txt
    
    - name: Set job status
      run: |
        TOTAL_TESTS="${{ steps.test-suite.outputs.total_tests }}"
        if [ -z "$TOTAL_TESTS" ] || [ "$TOTAL_TESTS" = "0" ]; then
          echo "❌ Test suite execution failed"
          exit 1
        else
          echo "✅ Test suite completed with $TOTAL_TESTS tests"
        fi
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const passRate = '${{ steps.test-suite.outputs.pass_rate }}' || '0.0';
          const totalTests = '${{ steps.test-suite.outputs.total_tests }}' || '0';
          const passedTests = '${{ steps.test-suite.outputs.passed_tests }}' || '0';
          const failedTests = '${{ steps.test-suite.outputs.failed_tests }}' || '0';
          const errorTests = '${{ steps.test-suite.outputs.error_tests }}' || '0';
          
          const statusEmoji = totalTests > 0 ? '✅' : '❌';
          const passRateColor = parseFloat(passRate) >= 90 ? '🟢' : parseFloat(passRate) >= 70 ? '🟡' : '🔴';
          
          let comment;
          if (totalTests === '0') {
            comment = `## ❌ JSON Schema Test Suite Results
          
          **⚠️ Test suite execution failed or no results available**
          
          The test suite could not be executed or did not produce results. This might be due to:
          - Build failures
          - Configuration issues
          - Test suite runner errors
          
          📊 [View detailed logs in the workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ---
          *This comment is automatically updated for each commit.*`;
          } else {
            comment = `## ${statusEmoji} JSON Schema Test Suite Results
          
          **${passRateColor} Overall Pass Rate: ${passRate}%**
          
          | Metric | Count | Percentage |
          |--------|-------|------------|
          | Total Tests | ${totalTests} | 100% |
          | ✅ Passed | ${passedTests} | ${totalTests > 0 ? ((passedTests/totalTests) * 100).toFixed(1) : 0}% |
          | ❌ Failed | ${failedTests} | ${totalTests > 0 ? ((failedTests/totalTests) * 100).toFixed(1) : 0}% |
          | 🚨 Errors | ${errorTests} | ${totalTests > 0 ? ((errorTests/totalTests) * 100).toFixed(1) : 0}% |
          
          📊 [View detailed results in the workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ${parseFloat(passRate) >= 90 ? '🎉 Excellent test coverage!' : parseFloat(passRate) >= 70 ? '👍 Good test coverage!' : '⚠️ Test coverage needs improvement.'}
          
          ---
          *This comment is automatically updated for each commit.*`;
          }
          
          // Find existing PR comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('JSON Schema Test Suite Results') && 
            comment.user.login === 'github-actions[bot]'
          );
          
          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
            console.log(`Updated comment ${existingComment.id} on PR #${context.issue.number}`);
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
            console.log(`Created new comment on PR #${context.issue.number}`);
          }